package fansirsqi.xposed.sesame.util;

import android.annotation.SuppressLint;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;

import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import fansirsqi.xposed.sesame.data.RuntimeInfo;
import fansirsqi.xposed.sesame.model.BaseModel;
import fansirsqi.xposed.sesame.task.ModelTask;

import lombok.Getter;

public class Notify {
    private static final Handler mainHandler = new Handler(Looper.getMainLooper());

    @SuppressLint("StaticFieldLeak")
    public static Context context;
    private static final int NOTIFICATION_ID = 99;
    private static final int ERROR_NOTIFICATION_ID = 98;
    private static final String CHANNEL_ID = "fansirsqi.xposed.sesame.ANTFOREST_NOTIFY_CHANNEL";
    private static NotificationManager mNotifyManager;
    private static NotificationCompat.Builder builder;

    private static long lastUpdateTime = 0;
    private static long nextExecTimeCache = 0;
    private static String titleText = "";
    private static String contentText = "";

    @SuppressLint("ObsoleteSdkInt")
    public static void sendErrorNotification(String title, String content) {
        try {
            if (context == null) {
                return;
            }
            mNotifyManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                NotificationChannel notificationChannel = new NotificationChannel(CHANNEL_ID, "‚ÄºÔ∏è ËäùÈ∫ªÁ≤íÂºÇÂ∏∏ÈÄöÁü•", NotificationManager.IMPORTANCE_LOW);
                mNotifyManager.createNotificationChannel(notificationChannel);
            }
            builder = new NotificationCompat.Builder(context, CHANNEL_ID)
                    .setCategory(NotificationCompat.CATEGORY_ERROR)
                    .setSmallIcon(android.R.drawable.sym_def_app_icon)
                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), android.R.drawable.sym_def_app_icon))
                    .setContentTitle(title)
                    .setContentText(content)
                    .setSubText("ËäùÈ∫ªÁ≤í")
                    .setAutoCancel(true);
            if (context instanceof Service) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    NotificationManagerCompat.from(context).notify(ERROR_NOTIFICATION_ID, builder.build());
                } else {
                    ((Service) context).startForeground(ERROR_NOTIFICATION_ID, builder.build());
                }
            } else {
                NotificationManagerCompat.from(context).notify(ERROR_NOTIFICATION_ID, builder.build());
            }
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    @SuppressLint("ObsoleteSdkInt")
    @Getter
    private static volatile long lastNoticeTime = 0;

    public static void start(Context context) {
        try {
            Notify.context = context;
            Notify.stop();
            titleText = "üöÄ ÂêØÂä®‰∏≠";
            contentText = "üîî ÊöÇÊó†Ê∂àÊÅØ";
            lastUpdateTime = System.currentTimeMillis();
            mNotifyManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
            Intent it = new Intent(Intent.ACTION_VIEW);
            it.setData(Uri.parse("alipays://platformapi/startapp?appId="));
            PendingIntent pi = PendingIntent.getActivity(context, 0, it, PendingIntent.FLAG_IMMUTABLE | PendingIntent.FLAG_UPDATE_CURRENT);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                NotificationChannel notificationChannel = new NotificationChannel(CHANNEL_ID, "üîî ËäùÈ∫ªÁ≤íËÉΩÈáèÊèêÈÜí", NotificationManager.IMPORTANCE_LOW);
                notificationChannel.enableLights(false);
                notificationChannel.enableVibration(false);
                notificationChannel.setShowBadge(false);
                mNotifyManager.createNotificationChannel(notificationChannel);
            }
            builder = new NotificationCompat.Builder(context, CHANNEL_ID)
                    .setCategory(NotificationCompat.CATEGORY_NAVIGATION)
                    .setSmallIcon(android.R.drawable.sym_def_app_icon)
                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), android.R.drawable.sym_def_app_icon))
                    .setContentTitle(titleText)
                    .setContentText(contentText)
                    .setSubText("ËäùÈ∫ªÁ≤í")
                    .setAutoCancel(false)
                    .setContentIntent(pi);
            if (BaseModel.getEnableOnGoing().getValue()) {
                builder.setOngoing(true);
            }
            NotificationManagerCompat.from(context).notify(ERROR_NOTIFICATION_ID, builder.build());
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    /**
     * ÂÅúÊ≠¢ÈÄöÁü•„ÄÇ ÁßªÈô§ÈÄöÁü•Âπ∂ÂÅúÊ≠¢ÂâçÂè∞ÊúçÂä°„ÄÇ
     */
    public static void stop() {
        try {
            if (context instanceof Service) {
                ((Service) context).stopForeground(Service.STOP_FOREGROUND_REMOVE);
            }
            NotificationManagerCompat.from(context).cancel(NOTIFICATION_ID);
            mNotifyManager = null;
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    /**
     * Êõ¥Êñ∞ÈÄöÁü•ÊñáÊú¨„ÄÇ Êõ¥Êñ∞ÈÄöÁü•ÁöÑÊ†áÈ¢òÂíåÂÜÖÂÆπÊñáÊú¨ÔºåÂπ∂ÂèëÈÄÅÈÄöÁü•„ÄÇ
     *
     * @param status Ë¶ÅÊõ¥Êñ∞ÁöÑÁä∂ÊÄÅÊñáÊú¨„ÄÇ
     */
    public static void updateStatusText(String status) {
        try {
            long forestPauseTime = RuntimeInfo.getInstance().getLong(RuntimeInfo.RuntimeInfoKey.ForestPauseTime);
            if (forestPauseTime > System.currentTimeMillis()) {
                status = "‚ùå Ëß¶ÂèëÂºÇÂ∏∏ÔºåÁ≠âÂæÖËá≥" + TimeUtil.getCommonDate(forestPauseTime) + "ÊÅ¢Â§çËøêË°å";
            }

            if (BaseModel.getEnableProgress().getValue() && !ModelTask.isAllTaskFinished()) {
                builder.setProgress(100, ModelTask.completedTaskPercentage(), false);
            } else {
                builder.setProgress(0, 0, false);
            }

            titleText = status;
            mainHandler.post(() -> sendText(true));
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    /**
     * Êõ¥Êñ∞‰∏ã‰∏ÄÊ¨°ÊâßË°åÊó∂Èó¥ÁöÑÊñáÊú¨„ÄÇ
     *
     * @param nextExecTime ‰∏ã‰∏ÄÊ¨°ÊâßË°åÁöÑÊó∂Èó¥„ÄÇ
     */
    public static void updateNextExecText(long nextExecTime) {
        try {
            if (nextExecTime != -1) {
                nextExecTimeCache = nextExecTime;
            }
            if (BaseModel.getEnableProgress().getValue() && !ModelTask.isAllTaskFinished()) {
                builder.setProgress(100, ModelTask.completedTaskPercentage(), false);
            } else {
                builder.setProgress(0, 0, false);
            }
            if (ModelTask.isAllTaskFinished()) {
                titleText = nextExecTimeCache > 0 ? "‚è∞ ‰∏ãÊ¨°ÊâßË°å " + TimeUtil.getTimeStr(nextExecTimeCache) : "";
            }
            mainHandler.post(() -> sendText(false));
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    /**
     * Âº∫Âà∂Âà∑Êñ∞ÈÄöÁü•ÔºåÂÖ®ÈÉ®‰ªªÂä°ÁªìÊùüÂêéË∞ÉÁî®
     */
    public static void forceUpdateText() {
        if (BaseModel.getEnableProgress().getValue() && !ModelTask.isAllTaskFinished()) {
            builder.setProgress(100, ModelTask.completedTaskPercentage(), false);
        } else {
            builder.setProgress(0, 0, false);
        }
        if (ModelTask.isAllTaskFinished()) {
            titleText = nextExecTimeCache > 0 ? "‚è∞ ‰∏ãÊ¨°ÊâßË°å " + TimeUtil.getTimeStr(nextExecTimeCache) : "";
        }
        mainHandler.post(() -> sendText(true));
    }

    /**
     * Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ÊâßË°åÁöÑÊñáÊú¨„ÄÇ
     *
     * @param content ‰∏ä‰∏ÄÊ¨°ÊâßË°åÁöÑÂÜÖÂÆπ„ÄÇ
     */
    public static void updateLastExecText(String content) {
        try {
            contentText = "üìå ‰∏äÊ¨°ÊâßË°å " + TimeUtil.getTimeStr(System.currentTimeMillis()) + "\nüåæ " + content;
            mainHandler.post(() -> sendText(false));
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }


    /**
     * ËÆæÁΩÆÁä∂ÊÄÅÊñáÊú¨‰∏∫ÊâßË°å‰∏≠„ÄÇ
     */
    public static void setStatusTextExec() {
        try {
            long forestPauseTime = RuntimeInfo.getInstance().getLong(RuntimeInfo.RuntimeInfoKey.ForestPauseTime);

            if (forestPauseTime > System.currentTimeMillis()) {
                titleText = "‚ùå Ëß¶ÂèëÂºÇÂ∏∏ÔºåÁ≠âÂæÖËá≥" + TimeUtil.getCommonDate(forestPauseTime) + "ÊÅ¢Â§çËøêË°å";
            }
            if (BaseModel.getEnableProgress().getValue()) {
                builder.setProgress(100, 0, false);
            }
            titleText = "‚öôÔ∏è ËäùÈ∫ªÁ≤íÊ≠£Âú®ÊñΩÂ∑•‰∏≠...";
            builder.setContentTitle(titleText);
            mainHandler.post(() -> sendText(true));
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    /**
     * ËÆæÁΩÆÁä∂ÊÄÅÊñáÊú¨‰∏∫Â∑≤Á¶ÅÁî®
     */
    public static void setStatusTextDisabled() {
        try {
            builder.setContentTitle("üö´ ËäùÈ∫ªÁ≤íÂ∑≤Á¶ÅÁî®");
            if (!StringUtil.isEmpty(contentText)) {
                builder.setContentText(contentText);
            }
            builder.setProgress(0, 0, false);
            mainHandler.post(() -> sendText(true));
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    public static void setStatusTextExec(String content) {
        updateStatusText("‚öôÔ∏è " + content + " ÊñΩÂ∑•‰∏≠...");

    }

    /**
     * ÂèëÈÄÅÊñáÊú¨Êõ¥Êñ∞„ÄÇ Êõ¥Êñ∞ÈÄöÁü•ÁöÑÂÜÖÂÆπÊñáÊú¨ÔºåÂπ∂ÈáçÊñ∞ÂèëÈÄÅÈÄöÁü•„ÄÇ
     *
     * @param force ÊòØÂê¶Âº∫Âà∂Âà∑Êñ∞
     */
    private static void sendText(Boolean force) {
        try {
            if (!force && System.currentTimeMillis() - lastUpdateTime < 500) {
                return;
            }
            lastUpdateTime = System.currentTimeMillis();
            builder.setContentTitle(titleText);
            if (!StringUtil.isEmpty(contentText)) {
                builder.setContentText(contentText);
            }
            if (!BaseModel.getEnableProgress().getValue()) {
                builder.setProgress(0, 0, false);
            }
            mNotifyManager.notify(NOTIFICATION_ID, builder.build());
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }

    @SuppressLint("ObsoleteSdkInt")
    public static void sendNewNotification(Context context, String title, String content, int newNotificationId) {
        try {
            NotificationManager notifyManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
            Intent it = new Intent(Intent.ACTION_VIEW);
            it.setData(Uri.parse("alipays://platformapi/startapp?appId="));
            PendingIntent pi = PendingIntent.getActivity(context, 0, it, PendingIntent.FLAG_IMMUTABLE | PendingIntent.FLAG_UPDATE_CURRENT);
            NotificationCompat.Builder newBuilder = new NotificationCompat.Builder(context, CHANNEL_ID);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                NotificationChannel notificationChannel = new NotificationChannel(CHANNEL_ID, "üîî ËäùÈ∫ªÁ≤íÂÖ∂‰ªñÊèêÈÜí", NotificationManager.IMPORTANCE_HIGH);
                notifyManager.createNotificationChannel(notificationChannel);
            }
            // ÈÖçÁΩÆÊñ∞ÈÄöÁü•ÁöÑÊ†∑Âºè
            newBuilder
                    .setPriority(NotificationCompat.PRIORITY_HIGH)
                    .setSmallIcon(android.R.drawable.sym_def_app_icon)
                    .setContentTitle(title)
                    .setContentText(content)
                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), android.R.drawable.sym_def_app_icon))
                    .setAutoCancel(true)
                    .setContentIntent(pi);
            // ÂèëÈÄÅÊñ∞ÈÄöÁü•
            if (context instanceof Service) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    NotificationManagerCompat.from(context).notify(newNotificationId, newBuilder.build());
                } else {
                    ((Service) context).startForeground(newNotificationId, newBuilder.build());
                }
            } else {
                NotificationManagerCompat.from(context).notify(newNotificationId, newBuilder.build());
            }
        } catch (Exception e) {
            Log.printStackTrace(e);
        }
    }
}
